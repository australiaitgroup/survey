#!/bin/bash

# DockerÊµãËØïËÑöÊú¨ - Survey Backend

echo "üß™ Testing Survey Backend Docker Deployment..."

# Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
echo "üìã Checking service status..."
docker-compose ps

# Á≠âÂæÖÊúçÂä°ÂêØÂä®
echo "‚è≥ Waiting for services to be ready..."
sleep 10

# ÊµãËØïBackendÂÅ•Â∫∑Ê£ÄÊü•
echo "üè• Testing backend health check..."
BACKEND_HEALTH=$(docker-compose exec -T backend wget --no-verbose --tries=1 --spider http://localhost:5050/api/surveys 2>&1)

if echo "$BACKEND_HEALTH" | grep -q "200 OK"; then
    echo "‚úÖ Backend health check passed"
else
    echo "‚ùå Backend health check failed"
    echo "Backend logs:"
    docker-compose logs backend | tail -20
fi

# ÊµãËØïMongoDBËøûÊé•
echo "üçÉ Testing MongoDB connection..."
MONGO_TEST=$(docker-compose exec -T mongodb mongosh --eval "db.runCommand({ping: 1})" 2>/dev/null)

if echo "$MONGO_TEST" | grep -q "ok.*1"; then
    echo "‚úÖ MongoDB connection successful"
else
    echo "‚ùå MongoDB connection failed"
    echo "MongoDB logs:"
    docker-compose logs mongodb | tail -10
fi

# ÊµãËØïAPIÁ´ØÁÇπ
echo "üåê Testing API endpoints..."
sleep 5

# ÊµãËØïsurveysÁ´ØÁÇπÔºàÈÄöËøábackendÂÆπÂô®ÂÜÖÈÉ®Ôºâ
API_TEST=$(docker-compose exec -T backend wget --no-verbose --tries=1 --spider http://localhost:5050/api/surveys 2>&1)

if echo "$API_TEST" | grep -q "200 OK"; then
    echo "‚úÖ API endpoint /api/surveys is accessible"
else
    echo "‚ùå API endpoint test failed"
    echo "Detailed backend logs:"
    docker-compose logs backend | tail -30
fi

echo ""
echo "üîç For detailed troubleshooting:"
echo "   View all logs: docker-compose logs"
echo "   View backend logs: docker-compose logs backend"
echo "   View mongodb logs: docker-compose logs mongodb"
echo "   Access backend container: docker-compose exec backend sh"