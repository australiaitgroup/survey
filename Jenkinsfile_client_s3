pipeline {
    agent any

    parameters {
        booleanParam(
            name: 'UPDATE_NGINX',
            defaultValue: false,
            description: 'Update Nginx configuration to enable S3 hosting'
        )
        string(
            name: 'WEB_SERVER_HOST',
            defaultValue: 'your-web-server.com',
            description: 'Web server hostname or IP (where sigma.jiangren.com.au is hosted)'
        )
        booleanParam(
            name: 'MIGRATE_FROM_DOCKER',
            defaultValue: false,
            description: 'Migrate from Docker EC2 deployment to S3 static hosting'
        )
    }

    environment {
        // Application configuration
        APP_NAME = 'survey-client'
        NODE_VERSION = '18'

        // S3 Configuration - these are hardcoded since AWS creds come from Vault
        S3_BUCKET_NAME = 'jr-sigma-survey-prod'
        AWS_REGION = 'ap-southeast-2'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Setup Node.js') {
            steps {
                echo 'Setting up Node.js environment...'
                sh '''
                    # Check Node.js version
                    node --version
                    npm --version
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing frontend dependencies...'
                dir('client') {
                    sh '''
                        # Clean install to ensure consistency
                        rm -rf node_modules package-lock.json
                        npm install
                    '''
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'Building frontend application...'
                dir('client') {
                    sh '''
                        # Build for production
                        NODE_ENV=production npm run build

                        # Verify build output
                        if [ ! -d "dist" ]; then
                            echo "❌ Build failed - dist directory not found"
                            exit 1
                        fi

                        echo "✅ Build completed successfully"
                        echo "Build contents:"
                        ls -la dist/
                    '''
                }
            }
        }

        stage('Deploy to S3') {
            steps {
                echo 'Deploying Frontend to S3...'
                // Note: S3 bucket 'jr-sigma-survey-prod' should be pre-configured with:
                // - Static website hosting enabled
                // - Public read policy for root objects
                // - Error document set to index.html for SPA routing
                withVault(configuration: [timeout: 60, vaultCredentialId: 'Vault Credential', vaultUrl: 'https://vault.jiangren.com.au'], vaultSecrets: [[path: 'secret_aws/aws_prod', secretValues: [[vaultKey: 'AWS_ACCESS_KEY_ID'], [vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
                    dir('client') {
                        sh '''
                            echo "🚀 Starting S3 deployment..."

                            # Sync files to S3 root with proper cache headers
                            echo "Uploading static assets to root..."
                            aws s3 sync dist/ s3://${S3_BUCKET_NAME}/ \
                                --region ${AWS_REGION} \
                                --delete \
                                --cache-control "public, max-age=31536000" \
                                --exclude "*.html" \
                                --exclude "*.json" \
                                --exclude "super-admin/*"

                            # Upload HTML and JSON files with no-cache headers
                            echo "Uploading HTML and JSON files..."
                            aws s3 sync dist/ s3://${S3_BUCKET_NAME}/ \
                                --region ${AWS_REGION} \
                                --include "*.html" \
                                --include "*.json" \
                                --exclude "super-admin/*" \
                                --cache-control "no-cache, no-store, must-revalidate"

                            # Set specific content type for index.html
                            aws s3 cp s3://${S3_BUCKET_NAME}/index.html \
                                s3://${S3_BUCKET_NAME}/index.html \
                                --region ${AWS_REGION} \
                                --content-type "text/html" \
                                --cache-control "no-cache, no-store, must-revalidate" \
                                --metadata-directive REPLACE

                            echo "✅ S3 deployment completed!"
                        '''
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo 'Performing deployment health check...'
                script {
                    // Wait a bit for S3 to update
                    sleep 10

                    sh '''
                        # Test S3 website endpoint
                        echo "✅ Deployment health check completed"
                        echo "Frontend should be available at: http://${S3_BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
                    '''
                }
            }
        }

        stage('Update Nginx Config') {
            when {
                expression { params.UPDATE_NGINX == true }
            }
            steps {
                echo 'Updating Nginx configuration for S3 hosting...'
                script {
                    // Use Jenkins SSH credentials to update Nginx config
                    sshagent(['web-server-ssh']) {
                        sh '''
                            echo "🔧 Updating Nginx configuration for S3 static hosting..."

                            # Create update script
                            cat > /tmp/update-nginx-s3.sh << 'EOF'
#!/bin/bash
set -e

CONFIG_FILE="/etc/nginx/sites-available/sigma.jiangren.com.au"
BACKUP_FILE="${CONFIG_FILE}.backup.s3migration.$(date +%Y%m%d_%H%M%S)"

echo "🔍 Checking Nginx configuration..."

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "❌ Nginx config file not found: $CONFIG_FILE"
    echo "ℹ️  Available configs:"
    ls -la /etc/nginx/sites-available/
    exit 1
fi

echo "📋 Creating backup..."
sudo cp "$CONFIG_FILE" "$BACKUP_FILE"
echo "✅ Backup created: $BACKUP_FILE"

echo "🔧 Updating main application to use S3..."

# Replace the main location block to proxy to S3 instead of localhost:3000
sudo sed -i 's|proxy_pass http://localhost:3000|proxy_pass http://jr-sigma-survey-prod.s3-website-ap-southeast-2.amazonaws.com|g' "$CONFIG_FILE"
sudo sed -i 's|proxy_set_header Host \\$host|proxy_set_header Host jr-sigma-survey-prod.s3-website-ap-southeast-2.amazonaws.com|g' "$CONFIG_FILE"

# Add S3-specific headers cleanup for main location
sudo sed -i '/location \\/ {/a\\        proxy_hide_header x-amz-id-2;' "$CONFIG_FILE"
sudo sed -i '/proxy_hide_header x-amz-id-2;/a\\        proxy_hide_header x-amz-request-id;' "$CONFIG_FILE"

echo "🧪 Testing Nginx configuration..."
sudo nginx -t

echo "🔄 Reloading Nginx..."
sudo nginx -s reload

echo "✅ Nginx configuration updated for S3 hosting!"
echo "🌐 Main app should now be available at: https://sigma.jiangren.com.au"
EOF

                            chmod +x /tmp/update-nginx-s3.sh

                            echo "📤 Copying script to web server..."
                            scp /tmp/update-nginx-s3.sh ${params.WEB_SERVER_HOST}:/tmp/

                            echo "🚀 Executing Nginx update on web server..."
                            ssh ${params.WEB_SERVER_HOST} 'sudo bash /tmp/update-nginx-s3.sh'

                            echo "🧹 Cleaning up temporary files..."
                            ssh ${params.WEB_SERVER_HOST} 'rm -f /tmp/update-nginx-s3.sh'
                            rm -f /tmp/update-nginx-s3.sh

                            echo "✅ Nginx configuration update completed!"
                        '''
                    }
                }
            }
        }

        stage('Verify Domain Access') {
            when {
                expression { params.UPDATE_NGINX == true }
            }
            steps {
                echo 'Verifying domain access...'
                script {
                    sleep 5  // Wait for Nginx to fully reload

                    sh '''
                        echo "🔍 Testing domain access..."

                        # Test main domain access
                        MAIN_URL="https://sigma.jiangren.com.au"
                        SUPER_ADMIN_URL="https://sigma.jiangren.com.au/super-admin"

                        echo "Testing main app: $MAIN_URL"
                        if curl -s -I "$MAIN_URL" | grep -q "200\\|301\\|302"; then
                            echo "✅ Main app access successful!"
                        else
                            echo "⚠️  Main app access test inconclusive"
                        fi

                        echo "Testing Super Admin: $SUPER_ADMIN_URL"
                        if curl -s -I "$SUPER_ADMIN_URL" | grep -q "200\\|301\\|302"; then
                            echo "✅ Super Admin access successful!"
                        else
                            echo "⚠️  Super Admin access test inconclusive"
                        fi

                        echo "📋 Access URLs:"
                        echo "   Main App S3: http://${S3_BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
                        echo "   Main App Domain: https://sigma.jiangren.com.au"
                        echo "   Super Admin Domain: https://sigma.jiangren.com.au/super-admin"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
            // Skip cleanWs due to Jenkins environment context issues
            echo 'Workspace cleanup skipped due to environment limitations'
        }
        success {
            echo '🎉 Frontend migration to S3 successful!'
            echo 'Main application deployed to: http://${S3_BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com'
            script {
                if (params.UPDATE_NGINX) {
                    echo '🌐 Domain access configured:'
                    echo '   Main App: https://sigma.jiangren.com.au'
                    echo '   Super Admin: https://sigma.jiangren.com.au/super-admin'
                } else {
                    echo 'ℹ️  To enable domain access, run this job again with UPDATE_NGINX=true'
                }
                if (params.MIGRATE_FROM_DOCKER) {
                    echo '🐳 Docker EC2 migration completed - you can now stop the Docker containers'
                }
            }
            // You can add success notifications here (Slack, email, etc.)
        }
        failure {
            echo '❌ Frontend migration failed!'
            echo 'ERROR: Check Vault credentials and AWS permissions'
            echo 'Required: Vault access and secret_aws/aws_prod configuration'
            // You can add failure notifications here
        }
    }
}
