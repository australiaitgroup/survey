pipeline {
    agent any

    environment {
        // Application configuration
        APP_NAME = 'sigma-main-frontend'
        NODE_VERSION = '18'

        // S3 Configuration - using existing bucket
        S3_BUCKET_NAME = 'uat-sigma.jiangren.com.au'
        AWS_REGION = 'ap-southeast-2'

        // S3 Static Website URL
        S3_WEBSITE_URL = "http://${S3_BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
        
        // NPM and Node configuration for better compatibility
        npm_config_optional = 'true'
        npm_config_legacy_peer_deps = 'true'
        
        // Tailwind/PostCSS configuration for Alpine Linux compatibility
        TAILWIND_DISABLE_TOUCH = '1'
        TAILWIND_MODE = 'compat'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('Setup Node.js') {
            steps {
                echo 'Setting up Node.js environment...'
                sh '''
                    # Check Node.js version
                    node --version
                    npm --version
                '''
            }
        }

        stage('Update S3 Bucket Policy') {
            steps {
                echo 'Updating S3 bucket policy to support both main app and super-admin...'
                withVault(configuration: [timeout: 60, vaultCredentialId: 'Vault Credential', vaultUrl: 'https://vault.jiangren.com.au'], vaultSecrets: [[path: 'secret_aws/aws_prod', secretValues: [[vaultKey: 'AWS_ACCESS_KEY_ID'], [vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
                    sh '''
set -e

echo "üìù Applying expanded bucket policy for main app and super-admin..."
POLICY_FILE=$(mktemp)
cat > $POLICY_FILE <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadSuperAdmin",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::${S3_BUCKET_NAME}/super-admin/*"
    },
    {
      "Sid": "PublicReadMainApp",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::${S3_BUCKET_NAME}/*"
    }
  ]
}
EOF

aws s3api put-bucket-policy --bucket ${S3_BUCKET_NAME} --policy file://$POLICY_FILE
rm -f $POLICY_FILE

echo "‚úÖ Bucket policy updated successfully"
echo "Now supports:"
echo "  - Root path access: arn:aws:s3:::${S3_BUCKET_NAME}/*"
echo "  - Super Admin path: arn:aws:s3:::${S3_BUCKET_NAME}/super-admin/*"
'''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing main frontend dependencies...'
                dir('client') {
                    sh '''
                        # Clean install with platform-specific options
                        rm -rf node_modules package-lock.json

                        # Backup PostCSS config and use simple config for Jenkins
                        if [ -f "postcss.config.js" ]; then
                            cp postcss.config.js postcss.config.js.original
                            cp postcss.config.simple.js postcss.config.js
                            echo "üîÑ Using simple PostCSS config for Jenkins build (avoids lightningcss)"
                        fi

                        # Install with legacy peer deps to avoid conflicts
                        echo "üì¶ Installing dependencies..."
                        npm install --legacy-peer-deps

                        # Ensure platform-specific rollup modules are installed
                        echo "üîß Ensuring Rollup native modules are available..."
                        if ! npm list @rollup/rollup-linux-x64-gnu > /dev/null 2>&1; then
                            echo "Installing missing Rollup native module..."
                            npm install @rollup/rollup-linux-x64-gnu --legacy-peer-deps || {
                                echo "Direct install failed, trying with force..."
                                npm install @rollup/rollup-linux-x64-gnu --force --legacy-peer-deps
                            }
                        fi

                        # Install lightningcss platform-specific modules for Alpine Linux (musl)
                        echo "üîß Installing lightningcss for Alpine Linux..."
                        npm install lightningcss-linux-x64-musl --legacy-peer-deps || {
                            echo "lightningcss-linux-x64-musl not available, trying alternative..."
                            npm install lightningcss --force --legacy-peer-deps || echo "lightningcss installation failed"
                        }

                        # Try to fix any potential native module issues
                        npm rebuild || echo "Rebuild failed, continuing..."
                        
                        # Final verification
                        echo "üîç Final package verification:"
                        npm list @tailwindcss/postcss autoprefixer postcss @rollup/rollup-linux-x64-gnu || echo "Some packages may have issues"
                    '''
                }
            }
        }

        stage('Build Main Frontend') {
            steps {
                echo 'Building main frontend application...'
                dir('client') {
                    sh '''
                        # Build for production
                        echo "üî® Building with simple PostCSS config..."
                        
                        # Check current PostCSS config
                        echo "Current PostCSS config:"
                        cat postcss.config.js
                        
                        # Check if rollup native module exists before building
                        if npm list @rollup/rollup-linux-x64-gnu > /dev/null 2>&1; then
                            echo "‚úÖ Rollup native module found"
                        else
                            echo "‚ö†Ô∏è  Rollup native module missing, attempting to install..."
                            npm install @rollup/rollup-linux-x64-gnu --legacy-peer-deps || echo "Failed to install rollup native module"
                        fi
                        
                        # Set environment variables to avoid lightningcss issues
                        export TAILWIND_DISABLE_TOUCH=1
                        export NODE_ENV=production
                        
                        # Try building
                        npm run build

                        # Verify build output
                        if [ ! -d "dist" ]; then
                            echo "‚ùå Build failed - dist directory not found"
                            exit 1
                        fi

                        echo "‚úÖ Build completed successfully"
                        echo "Build contents:"
                        ls -la dist/

                        # Restore original PostCSS config
                        if [ -f "postcss.config.js.original" ]; then
                            mv postcss.config.js.original postcss.config.js
                            echo "üîÑ Restored original PostCSS config"
                        fi
                    '''
                }
            }
        }

        stage('Deploy Main Frontend to S3') {
            steps {
                echo 'Deploying main frontend to S3 root path...'
                withVault(configuration: [timeout: 60, vaultCredentialId: 'Vault Credential', vaultUrl: 'https://vault.jiangren.com.au'], vaultSecrets: [[path: 'secret_aws/aws_prod', secretValues: [[vaultKey: 'AWS_ACCESS_KEY_ID'], [vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
                    dir('client') {
                        sh '''
                            echo "üöÄ Starting main frontend S3 deployment..."

                            # Create exclusion patterns to avoid overwriting super-admin
                            echo "‚ö†Ô∏è  Excluding super-admin directory from deployment..."

                            # Sync files to S3 root with proper cache headers, excluding super-admin
                            echo "Uploading static assets to root path..."
                            aws s3 sync dist/ s3://${S3_BUCKET_NAME}/ \
                                --region ${AWS_REGION} \
                                --delete \
                                --exclude "super-admin/*" \
                                --cache-control "public, max-age=31536000" \
                                --exclude "*.html" \
                                --exclude "*.json"

                            # Upload HTML and JSON files with no-cache headers
                            echo "Uploading HTML and JSON files to root path..."
                            aws s3 sync dist/ s3://${S3_BUCKET_NAME}/ \
                                --region ${AWS_REGION} \
                                --exclude "super-admin/*" \
                                --include "*.html" \
                                --include "*.json" \
                                --cache-control "no-cache, no-store, must-revalidate"

                            # Set specific content type for index.html
                            aws s3 cp s3://${S3_BUCKET_NAME}/index.html \
                                s3://${S3_BUCKET_NAME}/index.html \
                                --region ${AWS_REGION} \
                                --content-type "text/html" \
                                --cache-control "no-cache, no-store, must-revalidate" \
                                --metadata-directive REPLACE

                            echo "‚úÖ Main frontend S3 deployment completed!"
                            echo "üìÑ Verifying super-admin directory was not affected..."
                            aws s3 ls s3://${S3_BUCKET_NAME}/super-admin/ --recursive | head -5 || echo "Super-admin directory check complete"
                        '''
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo 'Performing main frontend deployment health check...'
                script {
                    // Wait a bit for S3 to update
                    sleep 10

                    sh '''
                        echo "‚úÖ Main frontend deployment health check completed"
                        echo "Main frontend should be available at: ${S3_WEBSITE_URL}"
                        echo "Super Admin should still be available at: ${S3_WEBSITE_URL}/super-admin"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Main frontend pipeline completed'
            echo 'Pipeline completed'
            cleanWs()
        }
        success {
            echo 'üéâ Main frontend deployment successful!'
            echo 'Main application deployed to: ${S3_WEBSITE_URL}'
            echo 'Super Admin remains at: ${S3_WEBSITE_URL}/super-admin'
        }
        failure {
            echo '‚ùå Main frontend deployment failed!'
            echo 'ERROR: Check Jenkins credentials and build configuration'
        }
    }
}
